// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package slice

import (
	"context"
	"sync"
)

var (
	lockKernelMockRun sync.RWMutex
)

// Ensure, that KernelMock does implement Kernel.
// If this is not the case, regenerate this file with moq.
var _ Kernel = &KernelMock{}

// KernelMock is a mock implementation of Kernel.
//
//     func TestSomethingThatUsesKernel(t *testing.T) {
//
//         // make and configure a mocked Kernel
//         mockedKernel := &KernelMock{
//             RunFunc: func(ctx context.Context) error {
// 	               panic("mock out the Run method")
//             },
//         }
//
//         // use mockedKernel in code that requires Kernel
//         // and then make assertions.
//
//     }
type KernelMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// Run calls RunFunc.
func (mock *KernelMock) Run(ctx context.Context) error {
	if mock.RunFunc == nil {
		panic("KernelMock.RunFunc: method is nil but Kernel.Run was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockKernelMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockKernelMockRun.Unlock()
	return mock.RunFunc(ctx)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedKernel.RunCalls())
func (mock *KernelMock) RunCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockKernelMockRun.RLock()
	calls = mock.calls.Run
	lockKernelMockRun.RUnlock()
	return calls
}
